@function map-set($map, $key, $value)
	@return map-merge($map, ($key: $value))

@function map-deep-get($map, $keys...)
	@each $key in $keys
		@if type-of($map) == 'map'
			$map: map-get($map, $key)
		@else
			@return null

	@return $map


@function list-pop($list, $times: 1)
	@if length($list) == $times
		@return ()

	$give-list: ()
	$end-length: length($list) - $times
	@for $i from 1 through $end-length
		$give-list: append($give-list, nth($list, $i))

	@return $give-list


@function list-slice($list, $start-at, $end-at: null)
	$give-list: ()
	$list-length: length($list)

	@if not $end-at
		$end-at: $list-length
	@else if $end-at < 0
		$end-at: $list-length + $end-at

	@for $i from $start-at through $end-at
		$give-list: append($give-list, nth($list, $i))

	@return $give-list


@function map-deep-merge($map, $keys-and-merge...)
	$merging-map: nth($keys-and-merge, -1)

	$keys: list-pop($keys-and-merge)

	$merged-map: ()
	@while length($keys) > 0
		$target-map: map-deep-get($map, $keys...)
		$merged-map: map-merge($target-map, $merging-map)
		$merged-map: (nth($keys, length($keys)): $merged-map)

		$merging-map: $merged-map

		$keys: list-pop($keys)

	@return map-merge($map, $merged-map)


@function map-deep-set($map, $keys-and-value...)
	$merge-map: (nth($keys-and-value, -2): nth($keys-and-value, -1))

	$keys: list-pop($keys-and-value, 2)
	$keys-and-merge: append($keys, $merge-map)

	@return map-deep-merge($map, $keys-and-merge...)


@function map-deep-has-key($map, $keys...)
	$check-key: nth($keys, -1)
	$keys: list-pop($keys)

	$check-map: map-deep-get($map, $keys...)
	@if $check-map
		@return map-has-key($check-map, $check-key)

	@else
		@return false

// $hell-map: (key: (next: (other: (thing: red))), various: empty, keys: here)
// @debug map-deep-merge($hell-map, key, next, other, (stuff: green))
// @debug map-deep-set($hell-map, key, next, other, stuff, green)
// @debug map-deep-set($hell-map, key, next, other, thing, green)


@function map-deep-push($map, $keys-and-value...)
	$value: nth($keys-and-value, -1)

	$keys: list-pop($keys-and-value)

	$array: map-deep-get($map, $keys...)
	@if not $array
		$array: ()

	$array: append($array, $value)


	$keys-and-array: append($keys, $array)

	@return map-deep-set($map, $keys-and-array...)

// $buried-list: (key: (next: (other: (obj, thing, stuff, man))))
// @debug map-deep-push($buried-list, key, next, other, dude)





/// things for power sets

// returns true if every item is true
@function bool-list-full($bool-list)
	@each $bool in $bool-list
		// fi any item is false, the thing is not full
		@if not $bool
			@return false

	// if we get here, every item is true
	@return true


@function increment-bool-list($bool-list)
	// the first 0 we encounter needs to be flipped
	// and all 1's previous to it need to be set to 0
	@for $i from 1 through length($bool-list)
		$bool: nth($bool-list, $i)
		@if not $bool
			$bool-list: set-nth($bool-list, $i, true)

			@for $j from 1 to $i
				$bool-list: set-nth($bool-list, $j, false)

			@return $bool-list

	// in this situation, the list is full
	@error "a full bool-list was passed to increment list"


@function set-from-bool-list($list, $bool-list)
	$set: ()

	@for $i from 1 through length($list)
		$bool: nth($bool-list, $i)

		@if $bool
			$item: nth($list, $i)
			$set: append($set, $item)

	@return $set


@function power-set($list)
	// create a "binary-like" list of flags indicating whether an item is included
	$bool-list: ()
	@each $i in $list
		$bool-list: append($bool-list, false)

	$all-sets: ()
	@while not bool-list-full($bool-list)
		$bool-list: increment-bool-list($bool-list)

		$new-set: set-from-bool-list($list, $bool-list)
		$all-sets: append($all-sets, $new-set)

	@return $all-sets


@function selector-unify-all($selectors...)
	@if length($selectors) == 1
		@return nth($selectors, 1)

	$unified: selector-unify(nth($selectors, 1), nth($selectors, 2))

	@if length($selectors) == 2
		@return $unified

	@for $i from 3 through length($selectors)
		$unified: selector-unify($unified, nth($selectors, $i))

	@return $unified

$selectors: (':hover', '#thing', '[target=_blank]', '.other')

// .component
// 	@each $set in power-set($selectors)
// 		@debug $set
// 		@debug selector-unify-all(&, $set...)
// 		@debug ''



// // @debug selector-append('[target=_blank]', ':hover', '.a', '.b', 'span')
// .component
// 	// in order to support this, we have to detect these situations and use @at-root in dy-build as well
// 	@at-root span#{&}
// 		@debug &
// 		@debug #{&}
// 		color: red

// 	// @debug selector-unify-all('[target=_blank]', ':hover', '.a', '.b', 'span', &)
// 	// #{selector-unify-all('[target=_blank]', ':hover', '.a', '.b', 'span', &)}
// 	// 	color: red